Data1$PM10 <- as.numeric(as.character(Data1$PM10))
Data1$WS <- as.numeric(as.character(Data1$WS))
polarPlot(Data1, pollutant = "PM10", x = "WS", wd = "WD", statistic = "nwr")
Data1$PM2.5 <- as.numeric(as.character(Data1$PM2.5))
Data1$PM2.5 <- as.numeric(Data1$PM2.5)
Data1$PM2.5 <- as.numeric(as.character(Data1$PM2.5))
polarPlot(Data1, pollutant = "PM2.5", x = "WS", wd = "WD", statistic = "nwr")
Data1$To Date <- as.Date(Data1$To Date)
Data1$ToDate <- as.Date(Data1$To Date)
Data1$ToDate <- as.Date(Data1$ToDate)
Data1$`To Date` <- as.Date(Data1$`To Date`)
Data_filtered <- subset(Data1, `To Date` >= as.Date("2024-04-22") & `To Date` <= as.Date("2024-04-24"))
polarPlot(Data_filtered, pollutant = "PM10", x = "WS", wd = "WD", statistic = "nwr")
Data_filtered$WD <- as.numeric(as.character(Data_filtered$WD))
Data_filtered$PM10 <- as.numeric(as.character(Data_filtered$PM10))
Data_filtered$WS <- as.numeric(as.character(Data_filtered$WS))
Data_filtered$PM2.5 <- as.numeric(as.character(Data_filtered$PM2.5))
polarPlot(Data_filtered, pollutant = "PM10", x = "WS", wd = "WD", statistic = "nwr")
Data_filtered$WS <- as.numeric(Data_filtered$WS)
Data_filtered$WD <- as.numeric(Data_filtered$WD)
Data_filtered$PM10 <- as.numeric(Data_filtered$PM10)
Data_filtered$PM2.5 <- as.numeric(Data_filtered$PM2.5)
Data_filtered$WD <- as.numeric(as.character(Data_filtered$WD))
Data_filtered$PM10 <- as.numeric(as.character(Data_filtered$PM10))
Data_filtered$WS <- as.numeric(as.character(Data_filtered$WS))
Data_filtered$PM2.5 <- as.numeric(as.character(Data_filtered$PM2.5))
polarPlot(Data_filtered, pollutant = "PM10", x = "WS", wd = "WD", statistic = "nwr")
str(Data_filtered)
Data_filtered$WS <- as.numeric(Data_filtered$WS)
Data_filtered$WD <- as.numeric(Data_filtered$WD)
Data_filtered$PM10 <- as.numeric(Data_filtered$PM10)
Data_filtered$PM2.5 <- as.numeric(Data_filtered$PM2.5)
# Remove rows with NA values if necessary
Data_filtered <- na.omit(Data_filtered)
polarPlot(Data_filtered, pollutant = "PM10", x = "WS", wd = "WD", statistic = "nwr")
View(Data_filtered)
View(Data_filtered)
View(Data1)
View(Data1)
Data1$`To Date` <- as.POSIXct(Data1$`To Date`, format = "%Y-%m-%d %H:%M:%S")
# Define your desired date and time range (April 22 to April 24, 2024, 00:00 to 23:59)
start_date <- as.POSIXct("2024-04-22 00:00:00")
end_date <- as.POSIXct("2024-04-24 23:59:59")
# Filter data for the desired date and time range
Data_filtered <- Data1[Data1$`To Date` >= start_date & Data1$`To Date` <= end_date, ]
Data1$`To Date` <- as.POSIXct(Data1$`To Date`, format = "%Y-%m-%d %H:%M:%S")
Data_filtered <- Data1[Data1$`To Date` >= start_date & Data1$`To Date` <= end_date, ]
View(Data_filtered)
View(Data_filtered)
Data1$`From Date` <- as.POSIXct(Data1$`From Date`, format = "%Y-%m-%d %H:%M:%S")
# Define your desired date and time range (April 22 to April 24, 2024, 00:00 to 23:59)
start_date <- as.POSIXct("2024-04-22 00:00:00")
end_date <- as.POSIXct("2024-04-24 23:59:59")
# Filter data for the desired date and time range
Data_filtered <- Data1[Data1$`To Date` >= start_date & Data1$`To Date` <= end_date, ]
View(Data_filtered)
View(Data_filtered)
# Define your desired date and time range (April 22 to April 24, 2024, 00:00 to 23:59)
start_date <- as.POSIXct("2024-04-22 00:00:00")
end_date <- as.POSIXct("2024-04-25 00:00:00")
# Filter data for the desired date and time range
Data_filtered <- Data1[Data1$`To Date` >= start_date & Data1$`To Date` <= end_date, ]
# Clear workspace and load necessary libraries
rm(list = ls())
# Define necessary packages for installation and loading
packages <- c(
"tidyverse", "lubridate", "openair", "gdata", "readxl"
)
# Install packages if not already installed
install.packages(packages)
install.packages(packages)
# Load required libraries
library(tidyverse)
library(lubridate)
library(openair)
library(gdata)
library(readxl)
library(readr)
# Set working directory
setwd("F:/Ph.D/Project_Landfill_fires/Data/2024/Ghazipur")
# Read Excel file, assuming it has multiple sheets and you want the second sheet
xl_file_path <- "F:/Ph.D/Project_Landfill_fires/Data/2024/Ghazipur/Patparganj_2024.xlsx"
# Read the CSV file
Data1 <- read_xlsx(csv_file_path)
# Read the CSV file
Data1 <- read_xlsx(xl_file_path)
Data1 <- na.omit(Data1)
# Clean data by removing rows with NA values
unique_values <- unique(Data1$WD)
# Clear workspace and load necessary libraries
rm(list = ls())
# Define necessary packages for installation and loading
packages <- c("tidyverse", "lubridate", "openair", "gdata", "readxl", "readr")
# Install packages if not already installed
installed_packages <- rownames(installed.packages())
for (pkg in packages) {
if (!(pkg %in% installed_packages)) {
install.packages(pkg, dependencies = TRUE)
}
}
# Load required libraries
library(tidyverse)
library(lubridate)
library(openair)
library(gdata)
library(readxl)
library(readr)
# Set working directory
setwd("F:/Ph.D/Project_Landfill_fires/Data/2024/Ghazipur")
# Read Excel file, assuming it has multiple sheets and you want the second sheet
xl_file_path <- "F:/Ph.D/Project_Landfill_fires/Data/2024/Ghazipur/Patparganj_2024.xlsx"
# Read the second sheet from the Excel file
Data1 <- read_xlsx(xl_file_path, sheet = 2)
Data1 <- na.omit(Data1)
# Clean data by removing rows with NA values
unique_values <- unique(Data1$WD)
print(unique_values)
# Convert necessary columns to numeric and date/time formats
Data1 <- Data1 %>%
mutate(
WS = as.numeric(as.character(WS)),
WD = as.numeric(as.character(WD)),
PM10 = as.numeric(as.character(PM10)),
PM2.5 = as.numeric(as.character(PM2.5))
) %>%
na.omit()
# Convert necessary columns to numeric and date/time formats
Data1 <- Data1 %>%
mutate(
WS = as.numeric(as.character(WS)),
WD = as.numeric(as.character(WD)),
PM10 = as.numeric(as.character(PM10)),
PM2.5 = as.numeric(as.character(PM2.5))
) %>%
na.omit()
# Print structure of Data1 to check if everything is correctly read and converted
str(Data1)
# Clear workspace and load necessary libraries
rm(list = ls())
# Define necessary packages for installation and loading
packages <- c("tidyverse", "lubridate", "openair", "gdata", "readxl", "readr")
# Install packages if not already installed
installed_packages <- rownames(installed.packages())
for (pkg in packages) {
if (!(pkg %in% installed_packages)) {
install.packages(pkg, dependencies = TRUE)
}
}
# Load required libraries
library(tidyverse)
library(lubridate)
library(openair)
library(gdata)
library(readxl)
library(readr)
# Set working directory
setwd("F:/Ph.D/Project_Landfill_fires/Data/2024/Ghazipur")
# Read Excel file, assuming it has multiple sheets and you want the second sheet
xl_file_path <- "F:/Ph.D/Project_Landfill_fires/Data/2024/Ghazipur/Patparganj_2024.xlsx"
# Read the second sheet from the Excel file
Data1 <- read_xlsx(xl_file_path, sheet = 2)
# Convert 'From Date' column to POSIXct date-time format
Data1 <- Data1 %>%
mutate(`From Date` = dmy_hm(`From Date`))
# Define the periods for before, during, and after the fire
before_fire <- Data1 %>%
filter(`From Date` >= as.POSIXct("2024-01-19") & `From Date` < as.POSIXct("2024-01-22"))
during_fire <- Data1 %>%
filter(`From Date` >= as.POSIXct("2024-01-22") & `From Date` < as.POSIXct("2024-01-25"))
after_fire <- Data1 %>%
filter(`From Date` >= as.POSIXct("2024-01-25") & `From Date` < as.POSIXct("2024-01-28"))
# Function to convert necessary columns to numeric and handle NA values
prepare_data <- function(data) {
data <- data %>%
mutate(
WS = as.numeric(as.character(WS)),
WD = as.numeric(as.character(WD)),
PM10 = as.numeric(as.character(PM10)),
PM2.5 = as.numeric(as.character(PM2.5))
) %>%
na.omit()
return(data)
}
# Prepare data for each period
before_fire <- prepare_data(before_fire)
during_fire <- prepare_data(during_fire)
after_fire <- prepare_data(after_fire)
# Save polar plot for PM10 before fire as PNG
png(filename = "polar_plot_PM10_before_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(before_fire, pollutant = "PM10", x = "WS", wd = "WD", statistic = "nwr",
main = "Polar Plot for PM10 (Before Fire)")
dev.off()
# Save polar plot for PM10 during fire as PNG
png(filename = "polar_plot_PM10_during_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(during_fire, pollutant = "PM10", x = "WS", wd = "WD", statistic = "nwr",
main = "Polar Plot for PM10 (During Fire)")
dev.off()
# Save polar plot for PM10 after fire as PNG
png(filename = "polar_plot_PM10_after_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(after_fire, pollutant = "PM10", x = "WS", wd = "WD", statistic = "nwr",
main = "Polar Plot for PM10 (After Fire)")
dev.off()
# Save polar plot for PM2.5 before fire as PNG
png(filename = "polar_plot_PM2.5_before_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(before_fire, pollutant = "PM2.5", x = "WS", wd = "WD", statistic = "nwr",
main = "Polar Plot for PM2.5 (Before Fire)")
dev.off()
# Save polar plot for PM2.5 during fire as PNG
png(filename = "polar_plot_PM2.5_during_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(during_fire, pollutant = "PM2.5", x = "WS", wd = "WD", statistic = "nwr",
main = "Polar Plot for PM2.5 (During Fire)")
dev.off()
# Save polar plot for PM2.5 after fire as PNG
png(filename = "polar_plot_PM2.5_after_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(after_fire, pollutant = "PM2.5", x = "WS", wd = "WD", statistic = "nwr",
main = "Polar Plot for PM2.5 (After Fire)")
dev.off()
# Clear workspace and load necessary libraries
rm(list = ls())
# Define necessary packages for installation and loading
packages <- c("tidyverse", "lubridate", "openair", "gdata", "readxl", "readr")
# Install packages if not already installed
installed_packages <- rownames(installed.packages())
for (pkg in packages) {
if (!(pkg %in% installed_packages)) {
install.packages(pkg, dependencies = TRUE)
}
}
# Load required libraries
library(tidyverse)
library(lubridate)
library(openair)
library(gdata)
library(readxl)
library(readr)
# Set working directory
setwd("F:/Ph.D/Project_Landfill_fires/Data/2024/Ghazipur")
# Read Excel file, assuming it has multiple sheets and you want the second sheet
xl_file_path <- "F:/Ph.D/Project_Landfill_fires/Data/2024/Ghazipur/Patparganj_2024.xlsx"
# Read the second sheet from the Excel file
Data1 <- read_xlsx(xl_file_path, sheet = 2)
# Convert 'From Date' column to POSIXct date-time format
Data1 <- Data1 %>%
mutate(`From Date` = dmy_hm(`From Date`))
# Define the periods for before, during, and after the fire
before_fire <- Data1 %>%
filter(`From Date` >= as.POSIXct("2024-04-19") & `From Date` < as.POSIXct("2024-04-22"))
during_fire <- Data1 %>%
filter(`From Date` >= as.POSIXct("2024-04-22") & `From Date` < as.POSIXct("2024-04-25"))
after_fire <- Data1 %>%
filter(`From Date` >= as.POSIXct("2024-04-25") & `From Date` < as.POSIXct("2024-04-28"))
# Function to convert necessary columns to numeric and handle NA values
prepare_data <- function(data) {
data <- data %>%
mutate(
WS = as.numeric(as.character(WS)),
WD = as.numeric(as.character(WD)),
PM10 = as.numeric(as.character(PM10)),
PM2.5 = as.numeric(as.character(PM2.5))
) %>%
na.omit()
return(data)
}
# Prepare data for each period
before_fire <- prepare_data(before_fire)
during_fire <- prepare_data(during_fire)
after_fire <- prepare_data(after_fire)
# Save polar plot for PM10 before fire as PNG
png(filename = "polar_plot_PM10_before_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(before_fire, pollutant = "PM10", x = "WS", wd = "WD", statistic = "nwr",
main = "Polar Plot for PM10 (Before Fire)")
dev.off()
# Save polar plot for PM10 during fire as PNG
png(filename = "polar_plot_PM10_during_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(during_fire, pollutant = "PM10", x = "WS", wd = "WD", statistic = "nwr",
main = "Polar Plot for PM10 (During Fire)")
dev.off()
# Save polar plot for PM10 after fire as PNG
png(filename = "polar_plot_PM10_after_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(after_fire, pollutant = "PM10", x = "WS", wd = "WD", statistic = "nwr",
main = "Polar Plot for PM10 (After Fire)")
dev.off()
# Save polar plot for PM2.5 before fire as PNG
png(filename = "polar_plot_PM2.5_before_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(before_fire, pollutant = "PM2.5", x = "WS", wd = "WD", statistic = "nwr",
main = "Polar Plot for PM2.5 (Before Fire)")
dev.off()
# Save polar plot for PM2.5 during fire as PNG
png(filename = "polar_plot_PM2.5_during_fire.png", width = 800, height = 600)
# Set working directory
setwd("F:/Ph.D/Project_Landfill_fires/Data/2024/Ghazipur")
# Read Excel file, assuming it has multiple sheets and you want the second sheet
xl_file_path <- "F:/Ph.D/Project_Landfill_fires/Data/2024/Ghazipur/Patparganj_2024.xlsx"
# Read the second sheet from the Excel file
Data1 <- read_xlsx(xl_file_path, sheet = 2)
# Convert 'From Date' column to POSIXct date-time format
Data1 <- Data1 %>%
mutate(`From Date` = dmy_hm(`From Date`))
# Define the periods for before, during, and after the fire
before_fire <- Data1 %>%
filter(`From Date` >= as.POSIXct("2024-04-19") & `From Date` < as.POSIXct("2024-04-22"))
during_fire <- Data1 %>%
filter(`From Date` >= as.POSIXct("2024-04-22") & `From Date` < as.POSIXct("2024-04-25"))
after_fire <- Data1 %>%
filter(`From Date` >= as.POSIXct("2024-04-25") & `From Date` < as.POSIXct("2024-04-28"))
# Function to convert necessary columns to numeric and handle NA values
prepare_data <- function(data) {
data <- data %>%
mutate(
WS = as.numeric(as.character(WS)),
WD = as.numeric(as.character(WD)),
PM10 = as.numeric(as.character(PM10)),
PM2.5 = as.numeric(as.character(PM2.5))
) %>%
na.omit()
return(data)
}
# Prepare data for each period
before_fire <- prepare_data(before_fire)
during_fire <- prepare_data(during_fire)
after_fire <- prepare_data(after_fire)
# Save polar plot for PM10 before fire as PNG
png(filename = "polar_plot_PM10_before_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(before_fire, pollutant = "PM10", x = "WS", wd = "WD", statistic = "nwr",
main = "Polar Plot for PM10 (Before Fire)")
dev.off()
# Save polar plot for PM10 during fire as PNG
png(filename = "polar_plot_PM10_during_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(during_fire, pollutant = "PM10", x = "WS", wd = "WD", statistic = "nwr",
main = "Polar Plot for PM10 (During Fire)")
dev.off()
# Save polar plot for PM10 after fire as PNG
png(filename = "polar_plot_PM10_after_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(after_fire, pollutant = "PM10", x = "WS", wd = "WD", statistic = "nwr",
main = "Polar Plot for PM10 (After Fire)")
dev.off()
# Save polar plot for PM2.5 before fire as PNG
png(filename = "polar_plot_PM2.5_before_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(before_fire, pollutant = "PM2.5", x = "WS", wd = "WD", statistic = "nwr",
main = "Polar Plot for PM2.5 (Before Fire)")
dev.off()
# Save polar plot for PM2.5 during fire as PNG
png(filename = "polar_plot_PM2.5_during_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(during_fire, pollutant = "PM2.5", x = "WS", wd = "WD", statistic = "nwr",
main = "Polar Plot for PM2.5 (During Fire)")
dev.off()
# Save polar plot for PM2.5 after fire as PNG
png(filename = "polar_plot_PM2.5_after_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(after_fire, pollutant = "PM2.5", x = "WS", wd = "WD", statistic = "nwr",
main = "Polar Plot for PM2.5 (After Fire)")
dev.off()
# Clear workspace and load necessary libraries
rm(list = ls())
# Define necessary packages for installation and loading
packages <- c("tidyverse", "lubridate", "openair", "gdata", "readxl", "readr")
# Install packages if not already installed
installed_packages <- rownames(installed.packages())
for (pkg in packages) {
if (!(pkg %in% installed_packages)) {
install.packages(pkg, dependencies = TRUE)
}
}
# Load required libraries
library(tidyverse)
library(lubridate)
library(openair)
library(gdata)
library(readxl)
library(readr)
# Set working directory
setwd("F:/Ph.D/Project_Landfill_fires/Data/2024/Ghazipur")
# Read Excel file, assuming it has multiple sheets and you want the second sheet
xl_file_path <- "F:/Ph.D/Project_Landfill_fires/Data/2024/Ghazipur/Patparganj_2024.xlsx"
# Read the second sheet from the Excel file
Data1 <- read_xlsx(xl_file_path, sheet = 2)
# Convert 'From Date' column to POSIXct date-time format
Data1 <- Data1 %>%
mutate(`From Date` = dmy_hm(`From Date`))
# Define the periods for before, during, and after the fire
before_fire <- Data1 %>%
filter(`From Date` >= as.POSIXct("2024-04-19") & `From Date` < as.POSIXct("2024-04-22"))
during_fire <- Data1 %>%
filter(`From Date` >= as.POSIXct("2024-04-22") & `From Date` < as.POSIXct("2024-04-25"))
after_fire <- Data1 %>%
filter(`From Date` >= as.POSIXct("2024-04-25") & `From Date` < as.POSIXct("2024-04-28"))
# Function to convert necessary columns to numeric and handle NA values
prepare_data <- function(data) {
data <- data %>%
mutate(
WS = as.numeric(as.character(WS)),
WD = as.numeric(as.character(WD)),
PM10 = as.numeric(as.character(PM10)),
PM2.5 = as.numeric(as.character(PM2.5))
) %>%
na.omit()
return(data)
}
# Prepare data for each period
before_fire <- prepare_data(before_fire)
during_fire <- prepare_data(during_fire)
after_fire <- prepare_data(after_fire)
# Save polar plot for PM10 before fire as PNG
png(filename = "polar_plot_PM10_before_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(before_fire, pollutant = "PM10", x = "WS", wd = "WD", statistic = "nwr",
main = "Polar Plot for PM10 (Before Fire)")
mtext(expression(paste("µg/m"^3)), side = 2, line = 3, cex = 1.2)
mtext(expression(paste("µg/m"^3)), side = 2, line = 3, cex = 1.2)
dev.off()
# Save polar plot for PM10 before fire as PNG
png(filename = "polar_plot_PM10_before_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(before_fire, pollutant = "PM10", x = "WS", wd = "WD", statistic = "nwr",
main = "Polar Plot for PM10 (Before Fire)")
mtext(expression(paste("µg/m"^3)), side = 2, line = 3, cex = 1.2)
dev.off()
# Save polar plot for PM10 before fire as PNG
png(filename = "polar_plot_PM10_before_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(before_fire, pollutant = "PM10", x = "WS", wd = "WD", statistic = "nwr",
main = "Polar Plot for PM10 (Before Fire)")
mtext(expression(paste("µg/m"^3)), side = 2, line = 3, cex = 1.2)
# Save polar plot for PM10 during fire as PNG
png(filename = "polar_plot_PM10_during_fire.png", width = 800, height = 600)
# Save polar plot for PM10 before fire as PNG
png(filename = "polar_plot_PM10_before_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(before_fire, pollutant = "PM10", x = "WS", wd = "WD", statistic = "nwr",
main = expression(paste("Polar Plot for PM10 (Before Fire) [µg/m"^3, "]")))
dev.off()
# Save polar plot for PM10 during fire as PNG
png(filename = "polar_plot_PM10_during_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(during_fire, pollutant = "PM10", x = "WS", wd = "WD", statistic = "nwr",
main = expression(paste("Polar Plot for PM10 (During Fire) [µg/m"^3, "]")))
dev.off()
# Save polar plot for PM10 after fire as PNG
png(filename = "polar_plot_PM10_after_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(after_fire, pollutant = "PM10", x = "WS", wd = "WD", statistic = "nwr",
main = expression(paste("Polar Plot for PM10 (After Fire) [µg/m"^3, "]")))
dev.off()
# Save polar plot for PM2.5 before fire as PNG
png(filename = "polar_plot_PM2.5_before_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(before_fire, pollutant = "PM2.5", x = "WS", wd = "WD", statistic = "nwr",
main = expression(paste("Polar Plot for PM2.5 (Before Fire) [µg/m"^3, "]")))
dev.off()
# Save polar plot for PM2.5 during fire as PNG
png(filename = "polar_plot_PM2.5_during_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(during_fire, pollutant = "PM2.5", x = "WS", wd = "WD", statistic = "nwr",
main = expression(paste("Polar Plot for PM2.5 (During Fire) [µg/m"^3, "]")))
dev.off()
# Save polar plot for PM2.5 after fire as PNG
png(filename = "polar_plot_PM2.5_after_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(after_fire, pollutant = "PM2.5", x = "WS", wd = "WD", statistic = "nwr",
main = expression(paste("Polar Plot for PM2.5 (After Fire) [µg/m"^3, "]")))
dev.off()
# Save polar plot for PM10 before fire as PNG
png(filename = "polar_plot_PM10_before_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(before_fire, pollutant = "PM10", x = "WS", wd = "WD", statistic = "nwr",
key.header = "PM10", key.footer = expression(paste("[µg/m"^3, "]")))
dev.off()
# Save polar plot for PM10 during fire as PNG
png(filename = "polar_plot_PM10_during_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(during_fire, pollutant = "PM10", x = "WS", wd = "WD", statistic = "nwr",
key.header = "PM10", key.footer = expression(paste("[µg/m"^3, "]")))
dev.off()
# Save polar plot for PM10 after fire as PNG
png(filename = "polar_plot_PM10_after_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(after_fire, pollutant = "PM10", x = "WS", wd = "WD", statistic = "nwr",
key.header = "PM10", key.footer = expression(paste("[µg/m"^3, "]")))
dev.off()
# Save polar plot for PM2.5 before fire as PNG
png(filename = "polar_plot_PM2.5_before_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(before_fire, pollutant = "PM2.5", x = "WS", wd = "WD", statistic = "nwr",
key.header = "PM2.5", key.footer = expression(paste("[µg/m"^3, "]")))
dev.off()
# Save polar plot for PM2.5 during fire as PNG
png(filename = "polar_plot_PM2.5_during_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(during_fire, pollutant = "PM2.5", x = "WS", wd = "WD", statistic = "nwr",
key.header = "PM2.5", key.footer = expression(paste("[µg/m"^3, "]")))
dev.off()
# Save polar plot for PM2.5 after fire as PNG
png(filename = "polar_plot_PM2.5_after_fire.png", width = 800, height = 600)
par(cex.main = 2, cex.lab = 1.5, cex.axis = 1.5, cex = 1.5)
polarPlot(after_fire, pollutant = "PM2.5", x = "WS", wd = "WD", statistic = "nwr",
key.header = "PM2.5", key.footer = expression(paste("[µg/m"^3, "]")))
dev.off()
